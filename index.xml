<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wil&#39;s blog</title>
    <link>https://wils0n.github.io/</link>
    <description>Recent content on Wil&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wils0n.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manage Text Field changes and validations with Combine framework and other techniques</title>
      <link>https://wils0n.github.io/posts/manage-textfield-changes-and-validations-with-combine-framework-and-other-techniques/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/manage-textfield-changes-and-validations-with-combine-framework-and-other-techniques/</guid>
      <description>Introduction: In this Tutorial, you’ll learn how to manage Text Field changes using the Combine framework without SwiftUI.
Currently, there are many ways to detect the changes of UITextFields:
 Delegate protocol  func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool { //do stuff return true } Selectors  textField.addTarget(self, action: #selector(ViewController.textFieldDidChange(_:)), for: .editingChanged) .. @objc func textFieldDidChange(_ textField: UITextField) { // do stuff } We will use features of Combine framework. We assume that you know about publishers, subscriptions and operators of Combine.</description>
    </item>
    
    <item>
      <title>Experimental approach of Performance of map, filter vs for-loops in Swift</title>
      <link>https://wils0n.github.io/posts/experimental-approach-of-performance-of-map-and-filter-vs-for-loops/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/experimental-approach-of-performance-of-map-and-filter-vs-for-loops/</guid>
      <description>Introduction: In Swift programming there is a paradigm called functional programming. Map, filter and reduce are examples of this paradigm. In swift, we use these functions to loop over collections without using a for-loop.
The Basic Setup: Hardware: The data shown here was all generated from my personal Macbook Pro (macOS Catalina v10.15.6, 2.5 GHz Quad-Core Intel Core i5 with16 GBs 600 MHz DDR3)
Project Setup In terms of software, I used Xcode v11.</description>
    </item>
    
    <item>
      <title>My fist post</title>
      <link>https://wils0n.github.io/posts/my-first-post/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/my-first-post/</guid>
      <description>print(&amp;#34;Hello world&amp;#34;) </description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://wils0n.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/about/</guid>
      <description>My name is Wilson Julca Mejía and I’m a Software Engineer with 7 years of experience of which I have been working as a Backend Developer with Python and the last 4 years as an iOS developer with Swift and Objective-C. I have worked with many clients of banking, assurance, telecommunications, logistics and e-commerce.
I’m volunteering in a study group of my Faculty at San Marcos University teaching students about algorithms for competitive programming, because I like algorithms and I have participated in the International Competitive Programming Contest (ACM ICPC) as a competitor and as a coach for many years.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://wils0n.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/contact/</guid>
      <description>Follow me, @wil.jm.</description>
    </item>
    
  </channel>
</rss>