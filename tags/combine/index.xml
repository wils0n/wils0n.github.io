<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>combine on Wil&#39;s blog</title>
    <link>https://wils0n.github.io/tags/combine/</link>
    <description>Recent content in combine on Wil&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wils0n.github.io/tags/combine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manage Text Field changes and validations with Combine framework and other techniques</title>
      <link>https://wils0n.github.io/posts/manage-textfield-changes-and-validations-with-combine-framework-and-other-techniques/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/manage-textfield-changes-and-validations-with-combine-framework-and-other-techniques/</guid>
      <description>Introduction: In this Tutorial, youâ€™ll learn how to manage Text Fields changes using the Combine framework without SwiftUI.
Currently, there are many ways to detect the changes of UITextFields:
 Delegate protocol  func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool { //do stuff return true } Selectors  textField.addTarget(self, action: #selector(ViewController.textFieldDidChange(_:)), for: .editingChanged) .. @objc func textFieldDidChange(_ textField: UITextField) { // do stuff } We will use features of Combine framework. We assume that you know about publishers, subscriptions and operators of Combine.</description>
    </item>
    
  </channel>
</rss>