<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on Wil&#39;s blog</title>
    <link>https://wils0n.github.io/tags/ios/</link>
    <description>Recent content in iOS on Wil&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://wils0n.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOS tools to measure visually the distance between views</title>
      <link>https://wils0n.github.io/posts/ios-tools-to-measure-the-distance-between-views/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/ios-tools-to-measure-the-distance-between-views/</guid>
      <description>.center{ display: block; margin-left: auto; margin-right: auto; } .center-text { text-align: center !important; } .center-text span { border: 1px solid white; }  Introduction: In the Test stage in the Software Development Cycle there is the Visual Quality Assurance phase, a common task is to check the distance between views and the big part of issues in this phase is about that. To avoid these concerns we can use some debug instruments of the XCode Simulator and third party tools to check visually.</description>
    </item>
    
    <item>
      <title>How to create UI System Library to iOS Projects vía Swift Packages</title>
      <link>https://wils0n.github.io/posts/ui-sistem-color-library-swift-pages/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/ui-sistem-color-library-swift-pages/</guid>
      <description>Introduction: In big projects we need to modularize and define the design system as colors, typographies, iconography and more. To do that we can create a library to modularize existing iOS projects through Swift Packages, Cocoapods and similar ways.\
In this article we create and distribute a library in Swift Package and install and use that in an external project.
Requirements: To understand this tutorial we need knowledge about:
 Swift Packages Decorator Design Pattern Access Control in Swift  Create Library:  Open your XCode and select: File &amp;gt; New &amp;gt; Package to create the swift package.</description>
    </item>
    
    <item>
      <title>Code Coverage Reports in iOS Projects</title>
      <link>https://wils0n.github.io/posts/code-coverage-reports-in-ios-projects/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/code-coverage-reports-in-ios-projects/</guid>
      <description>Introduction: Code coverage is an important measure in the test phase of the life cycle of software development, which if our project has high test coverage suggests it has a low chance of containing undetected software bugs.
Requirements: To understand this tutorial we need knowledge about:
 Fastlane Unit test in ios projects Continuous integration (CI)  The Problem: In iOS projects, although XCode gives us code coverage measure, it isn’t practical to generate reports in continuous integration (CI), because we need some command line to use with a continuous integration service such as Jenkins, Travis or something similar.</description>
    </item>
    
  </channel>
</rss>
