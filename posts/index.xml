<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wil&#39;s blog</title>
    <link>https://wils0n.github.io/posts/</link>
    <description>Recent content in Posts on Wil&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 21 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://wils0n.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Estructura de datos lineales y no lineales</title>
      <link>https://wils0n.github.io/posts/estructura-de-datos-lineales-y-no-lineales/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/estructura-de-datos-lineales-y-no-lineales/</guid>
      <description>Introduction: La estructuras de datos es un medio para almacenar y organizar datos. Las diferentes estructuras de datos tienen diferentes ventajas. Por lo tanto, al diseñar un algoritmo, es importante elegir una estructura que permita una inserción, búsqueda, eliminación, consulta y / o actualización efectivas de acuerdo con los requisitos de su algoritmo.
  </description>
    </item>
    
    <item>
      <title>Code Coverage Reports in iOS Projects</title>
      <link>https://wils0n.github.io/posts/code-coverage-reports-in-ios-projects/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/code-coverage-reports-in-ios-projects/</guid>
      <description>Introduction: Code coverage is an important measure in the test phase of the life cycle of software development, which if our project has high test coverage suggests it has a low chance of containing undetected software bugs.
Requirements: To understand this tutorial we need knowledge about:
 Fastlane Unit test in ios projects Continuous integration (CI)  The Problem: In iOS projects, although XCode gives us code coverage measure, it isn’t practical to generate reports in continuous integration (CI), because we need some command line to use with a continuous integration service such as Jenkins, Travis or something similar.</description>
    </item>
    
    <item>
      <title>Manage UITextField changes and validations with Combine framework and other techniques</title>
      <link>https://wils0n.github.io/posts/manage-textfield-changes-and-validations-with-combine-framework-and-other-techniques/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/manage-textfield-changes-and-validations-with-combine-framework-and-other-techniques/</guid>
      <description>Introduction: In this Tutorial, you’ll learn how to manage UITextFields changes using the Combine framework.
Currently, there are many ways to detect the changes of UITextFields:
 Delegate protocol  func textFieldShouldReturn(_ textField: UITextField) -&amp;gt; Bool { //do stuff return true } Selectors  textField.addTarget(self, action: #selector(ViewController.textFieldDidChange(_:)), for: .editingChanged) ... @objc func textFieldDidChange(_ textField: UITextField) { // do stuff } We will use features of Combine framework. We assume that you know about publishers, subscriptions and operators of Combine.</description>
    </item>
    
    <item>
      <title>Experimental approach of Performance of map, filter vs for-loops in Swift</title>
      <link>https://wils0n.github.io/posts/experimental-approach-of-performance-of-map-and-filter-vs-for-loops/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/experimental-approach-of-performance-of-map-and-filter-vs-for-loops/</guid>
      <description>Introduction: In Swift programming there is a paradigm called functional programming. Map, filter and reduce are examples of this paradigm. In swift, we use these functions to loop over collections without using a for-loop.
The Basic Setup: Hardware: The data shown here was all generated from my personal Macbook Pro (macOS Catalina v10.15.6, 2.5 GHz Quad-Core Intel Core i5 with16 GBs 600 MHz DDR3)
Project Setup In terms of software, I used Xcode v11.</description>
    </item>
    
    <item>
      <title>Análisis de Complejidad Algorítimica</title>
      <link>https://wils0n.github.io/posts/analisis-de-complejidad-algoritimica/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/analisis-de-complejidad-algoritimica/</guid>
      <description>Introduction: La eficiencia de los algoritmos juega un papel importante en la programación competitiva. Al calcular la complejidad temporal, podemos descubrir si el algoritmo es lo suficientemente rápido para resolver un problema.
  </description>
    </item>
    
    <item>
      <title>My first post</title>
      <link>https://wils0n.github.io/posts/my-first-post/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wils0n.github.io/posts/my-first-post/</guid>
      <description>print(&amp;#34;Hello world&amp;#34;) </description>
    </item>
    
  </channel>
</rss>
